swagger: "2.0"
info:
  description: "This is the API definition for the team Goat Boat mentor pairing     app.  You can find out more about Goat Boat and our app at                     [http://github.com/crav12345/GoatBoat](http://github.com/crav12345/GoatBoat)."
  version: "1.0.0"
  title: "Goat Boat Mentor Connections"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "christopher.ravosa1@marist.edu"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "github.com"
basePath: "/crav12345/GoatBoat"
tags:
- name: "user"
  description: "Everything a user can do with their account"
  externalDocs:
    description: "Find out more"
    url: "http://github.com/crav12345/GoatBoat"
schemes:
- "https"
- "http"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/profile/{username}:
    get:
      tags:
      - "user"
      summary: "Get all details of a user profile"
      description: ""
      operationId: "getProfile"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /user/profile/{username}/{detail}:
    get:
      tags:
      - "user"
      summary: "Get a specific field in a user profile"
      description: ""
      operationId: "getProfileDetail"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      - name: "detail"
        in: "path"
        description: "The field that needs to be fetched from the user profile."
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    post:
      tags:
      - "user"
      summary: "Get a specific field in a user profile"
      description: ""
      operationId: "postProfileDetail"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      - name: "detail"
        in: "path"
        description: "The field that needs to be fetched from the user profile."
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /user/{username}/courseRequests:
    get:
      tags:
      - "user"
      summary: "Get courses a user needs assistance in"
      description: ""
      operationId: "getCourseRequests"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "204":
          description: "This user has no course requests"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    post:
      tags:
      - "user"
      summary: "Add a new course a user needs assistance in"
      description: ""
      operationId: "postCourseRequests"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /user/{username}/courseOfferings:
    get:
      tags:
      - "user"
      summary: "Get courses a user is offering assistance in"
      description: ""
      operationId: "getCourseOfferings"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "204":
          description: "This user has no course requests"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    post:
      tags:
      - "user"
      summary: "Add a new course a user is offering assistance in"
      description: ""
      operationId: "postCourseOfferings"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /user/{username}/connections:
    get:
      tags:
      - "user"
      summary: "Gets all of a user's connections"
      description: ""
      operationId: "getConnections"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    post:
      tags:
      - "user"
      summary: "Post a new connection for a userr"
      description: ""
      operationId: "postConnection"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /user/{username}/suggestions:
    get:
      tags:
      - "user"
      summary: "Get server generated suggested connections for a user"
      description: ""
      operationId: "getSuggestions"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /user/{username}/like:
    get:
      tags:
      - "user"
      summary: "Get all users a user has shown interest in connecting with"
      description: ""
      operationId: "getLikes"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    post:
      tags:
      - "user"
      summary: "Post a new user to the current user's liked accounts"
      description: ""
      operationId: "postLike"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /user/{username}/pass:
    post:
      tags:
      - "user"
      summary: "Post a user to this user's list of passed on accounts"
      description: ""
      operationId: "postPass"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
securityDefinitions:
  goatboat_auth:
    type: "oauth2"
    authorizationUrl: "http://github.com/crav12345/GoatBoat"
    flow: "implicit"
    scopes:
      write:details: "modify details in your account"
      read:details: "read your account details"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      profession:
        type: "string"
      major:
        type: "string"
      lookingForMentor:
        type: "array"
        items:
          type: "string"
      lookingToMentor:
        type: "array"
        items:
          type: "string"
      mentors:
        type: "array"
        items:
          type: "object"
          properties:
            username:
              type: "string"
            class:
              type: "string"
      students:
        type: "array"
        items:
          type: "object"
          properties:
            username:
              type: "string"
            class:
              type: "string"
      schedule:
        type: "array"
        items:
          type: "object"
          properties:
            day:
              type: "object"
              properties:
                startTime: 
                  type: "integer"
                endTime:
                  type: "integer"
    xml:
      name: "User"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
