# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, username: str=None, first_name: str=None, last_name: str=None, email: str=None, profession: str=None, major: str=None, looking_for_mentor: List[str]=None, looking_to_mentor: List[str]=None, mentors: List[object]=None, students: List[object]=None, schedule: List[object]=None):  # noqa: E501
        """User - a model defined in Swagger

        :param username: The username of this User.  # noqa: E501
        :type username: str
        :param first_name: The first_name of this User.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this User.  # noqa: E501
        :type last_name: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param profession: The profession of this User.  # noqa: E501
        :type profession: str
        :param major: The major of this User.  # noqa: E501
        :type major: str
        :param looking_for_mentor: The looking_for_mentor of this User.  # noqa: E501
        :type looking_for_mentor: List[str]
        :param looking_to_mentor: The looking_to_mentor of this User.  # noqa: E501
        :type looking_to_mentor: List[str]
        :param mentors: The mentors of this User.  # noqa: E501
        :type mentors: List[object]
        :param students: The students of this User.  # noqa: E501
        :type students: List[object]
        :param schedule: The schedule of this User.  # noqa: E501
        :type schedule: List[object]
        """
        self.swagger_types = {
            'username': str,
            'first_name': str,
            'last_name': str,
            'email': str,
            'profession': str,
            'major': str,
            'looking_for_mentor': List[str],
            'looking_to_mentor': List[str],
            'mentors': List[object],
            'students': List[object],
            'schedule': List[object]
        }

        self.attribute_map = {
            'username': 'username',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'email': 'email',
            'profession': 'profession',
            'major': 'major',
            'looking_for_mentor': 'lookingForMentor',
            'looking_to_mentor': 'lookingToMentor',
            'mentors': 'mentors',
            'students': 'students',
            'schedule': 'schedule'
        }

        self._username = username
        self._first_name = first_name
        self._last_name = last_name
        self._email = email
        self._profession = profession
        self._major = major
        self._looking_for_mentor = looking_for_mentor
        self._looking_to_mentor = looking_to_mentor
        self._mentors = mentors
        self._students = students
        self._schedule = schedule

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self) -> str:
        """Gets the username of this User.


        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this User.


        :param username: The username of this User.
        :type username: str
        """

        self._username = username

    @property
    def first_name(self) -> str:
        """Gets the first_name of this User.


        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this User.


        :param first_name: The first_name of this User.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self) -> str:
        """Gets the last_name of this User.


        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this User.


        :param last_name: The last_name of this User.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def email(self) -> str:
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def profession(self) -> str:
        """Gets the profession of this User.


        :return: The profession of this User.
        :rtype: str
        """
        return self._profession

    @profession.setter
    def profession(self, profession: str):
        """Sets the profession of this User.


        :param profession: The profession of this User.
        :type profession: str
        """

        self._profession = profession

    @property
    def major(self) -> str:
        """Gets the major of this User.


        :return: The major of this User.
        :rtype: str
        """
        return self._major

    @major.setter
    def major(self, major: str):
        """Sets the major of this User.


        :param major: The major of this User.
        :type major: str
        """

        self._major = major

    @property
    def looking_for_mentor(self) -> List[str]:
        """Gets the looking_for_mentor of this User.


        :return: The looking_for_mentor of this User.
        :rtype: List[str]
        """
        return self._looking_for_mentor

    @looking_for_mentor.setter
    def looking_for_mentor(self, looking_for_mentor: List[str]):
        """Sets the looking_for_mentor of this User.


        :param looking_for_mentor: The looking_for_mentor of this User.
        :type looking_for_mentor: List[str]
        """

        self._looking_for_mentor = looking_for_mentor

    @property
    def looking_to_mentor(self) -> List[str]:
        """Gets the looking_to_mentor of this User.


        :return: The looking_to_mentor of this User.
        :rtype: List[str]
        """
        return self._looking_to_mentor

    @looking_to_mentor.setter
    def looking_to_mentor(self, looking_to_mentor: List[str]):
        """Sets the looking_to_mentor of this User.


        :param looking_to_mentor: The looking_to_mentor of this User.
        :type looking_to_mentor: List[str]
        """

        self._looking_to_mentor = looking_to_mentor

    @property
    def mentors(self) -> List[object]:
        """Gets the mentors of this User.


        :return: The mentors of this User.
        :rtype: List[object]
        """
        return self._mentors

    @mentors.setter
    def mentors(self, mentors: List[object]):
        """Sets the mentors of this User.


        :param mentors: The mentors of this User.
        :type mentors: List[object]
        """

        self._mentors = mentors

    @property
    def students(self) -> List[object]:
        """Gets the students of this User.


        :return: The students of this User.
        :rtype: List[object]
        """
        return self._students

    @students.setter
    def students(self, students: List[object]):
        """Sets the students of this User.


        :param students: The students of this User.
        :type students: List[object]
        """

        self._students = students

    @property
    def schedule(self) -> List[object]:
        """Gets the schedule of this User.


        :return: The schedule of this User.
        :rtype: List[object]
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule: List[object]):
        """Sets the schedule of this User.


        :param schedule: The schedule of this User.
        :type schedule: List[object]
        """

        self._schedule = schedule
